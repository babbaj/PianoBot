#pragma once

#include <unordered_map>


// map uppercase char to char that is used to create it
const std::unordered_map<char, char> BLACK_KEYS = {
    {'!', '1'},
    {'@', '2'},
    {'$', '4'},
    {'%', '5'},
    {'^', '6'},
    {'*', '8'},
    {'(', '9'},

    {'Q', 'Q'}, // TODO: simplify
    {'W', 'W'},
    {'E', 'E'},
    {'T', 'T'},
    {'Y', 'Y'},
    {'I', 'I'},
    {'O', 'O'},
    {'P', 'P'},
    {'S', 'S'},
    {'D', 'D'},
    {'G', 'G'},
    {'H', 'H'},
    {'J', 'J'},
    {'L', 'L'},
    {'Z', 'Z'},
    {'C', 'C'},
    {'V', 'V'},
    {'B', 'B'}
};

const std::set<char> VALID_KEYS = {
    '1', '!', '2', '@', '3', '4', '$', '5', '%', '6', '^', '7', '8', '*', '9', '(', '0',
    'q', 'Q', 'w', 'W', 'e', 'E', 'r', 't', 'T', 'y', 'Y', 'u', 'i', 'I', 'o', 'O', 'p', 'P', 'a', 's', 'S', 'd', 'D', 'f', 'g', 'G', 'h', 'H', 'j', 'J', 'k', 'l', 'L', 'z', 'Z', 'x', 'c', 'C', 'v', 'V', 'b', 'B', 'n', 'm'
};

const std::set<char> GROUP_CHARS = {
    '[', ']'
};

const std::set<char> PAUSE_CHARS = {
    '#', '&', ')', '|'/*, '-'*/
};

bool isBlackKey(char key) {
    return BLACK_KEYS.find(key) != BLACK_KEYS.end();
}

const std::unordered_map<int, char> KEYNUM_TO_KEY = {
    {1, '1'},
    {2, '!'},
    {3, '2'},
    {4, '@'},
    {5, '3'},
    {6, '4'},
    {7, '$'},
    {8, '5'},
    {9, '%'},
    {10, '6'},
    {11, '^'},
    {12, '7'},
    {13, '8'},
    {14, '*'},
    {15, '9'},
    {16, '('},
    {17, '0'},
    {18, 'q'},
    {19, 'Q'},
    {20, 'w'},
    {21, 'Q'},
    {22, 'e'},
    {23, 'E'},
    {24, 'r'},
    {25, 't'},
    {26, 'T'},
    {27, 'y'},
    {28, 'Y'},
    {29, 'u'},
    {30, 'i'},
    {31, 'I'},
    {32, 'o'},
    {33, 'O'},
    {34, 'p'},
    {35, 'P'},
    {36, 'a'},
    {37, 's'},
    {38, 'S'},
    {39, 'd'},
    {40, 'D'},
    {41, 'f'},
    {42, 'g'},
    {43, 'G'},
    {44, 'h'},
    {45, 'H'},
    {46, 'j'},
    {47, 'J'},
    {48, 'k'},
    {49, 'l'},
    {50, 'L'},
    {51, 'z'},
    {52, 'Z'},
    {53, 'x'},
    {54, 'c'},
    {55, 'C'},
    {56, 'v'},
    {57, 'V'},
    {58, 'b'},
    {59, 'B'},
    {60, 'n'},
    {61, 'm'}
};